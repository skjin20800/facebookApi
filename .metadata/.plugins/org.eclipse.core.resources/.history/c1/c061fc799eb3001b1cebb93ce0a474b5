package filter;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import anno.GetMapping;
import web.FrontController;
import web.dto.CMRespDto;

public class Dispatcher implements Filter {


	@Override
	public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)
			throws IOException, ServletException {


		
		HttpServletRequest request = (HttpServletRequest) req;
		HttpServletResponse response = (HttpServletResponse) resp;

		
		
		//UTF변환
		request.setCharacterEncoding("utf-8");
		//응답 데이터타입
		response.setContentType("application/json");
		
		String endPoint = request.getRequestURI().replaceAll(request.getContextPath(), "");
		
		System.out.println("엔드포인트 : " + endPoint); // /user/login
		System.out.println("겟 메서드"+request.getMethod());

		FrontController frontController = new FrontController();

		Method[] methods = frontController.getClass().getDeclaredMethods();

		for (Method method : methods) {
				Annotation annotation = method.getDeclaredAnnotation(GetMapping.class);
				GetMapping requestMapping = (GetMapping) annotation;	
			
			if (requestMapping.value().equals(endPoint)) {
				CMRespDto<?> cmRespDto = null;
				try {
					Parameter[] params = method.getParameters(); // LoginDto
					String path = null;
					if (params.length != 0) {
						// 해당 dtoInstance를 리플렉션해서 set함수 호출(username, password)
						Object dtoInstance = params[0].getType().newInstance();
						setData(dtoInstance, request); // request에서 적용할 setter값을 전부 dtoInstance에 넣어 DTO로 전달한다.
						cmRespDto = (CMRespDto<?>) method.invoke(frontController, dtoInstance);
					} else {
						cmRespDto = (CMRespDto<?>) method.invoke(frontController);
					}
					
					PrintWriter out = response.getWriter();
					if(cmRespDto.getStatusCode() == 1) {
						out.print("메세지 : "+ cmRespDto.getMsg());
						out.print("\n데이터 : " + cmRespDto.getData());
					}else {
						out.print("fail");
					}
					out.flush();
				} catch (Exception e) {
					e.printStackTrace();
				}
				break;
			}
		}
	}
	
	private <T> void setData(T dtoInstance, HttpServletRequest request) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));
		String input = "";
		String json = "";
		while((input = br.readLine()) != null) {
			json += input;
		}
		System.out.println("br : "+ json);
		
		//파라미터네임값
		Iterator<String> keys = jsonToKeys(json).iterator();
		//파라미터 네임 , 키값
		Map<String, String> values = jsonToValues(json);
		while (keys.hasNext()) { // 2번 돈다 //다음번 주소가 있는지 체크.
			String key = (String) keys.next(); //keys의 값을 key에담고 다음 keys값을 앞으로 땡겨놓는다
			String methodKey = keyToMethodKey(key); // setUsername

			Method[] methods = dtoInstance.getClass().getDeclaredMethods(); 

			for (Method method : methods) {
				if (method.getName().equals(methodKey)) {
					try {
						method.invoke(dtoInstance, values.get(key)); // String
					} catch (Exception e) {
						try {
							int value = Integer.parseInt(values.get(key));
							method.invoke(dtoInstance, value);
						} catch (Exception e2) {
							e2.printStackTrace();
						}
					}
				}
			}
		}
	}
	
	
	// 키, 값중 키 리스트 추출
	private List<String> jsonToKeys(String json) {
		String[] all = json.split(",");
		
		List<String> keys = new ArrayList<>();
		for(int i = 0; i < all.length; i++) {
		String[] all2 = all[i].split("\"");
		keys.add(all2[1]);			
		}
		
		return keys;
	}
	
	// 키, 값중 값 리스트 추출
	private Map<String, String> jsonToValues(String json) {
		String[] all = json.split(",");
		
		Map<String, String> values = new HashMap<>();
		for(int i = 0; i < all.length; i++) {
		String[] all2 = all[i].split("\"");
		values.put(all2[1], all2[3]);
		}

		return values;
	}
	

	private String keyToMethodKey(String key) {
		String firstKey = "set";
		String upperKey = key.substring(0, 1).toUpperCase();
		String remainKey = key.substring(1);

		return firstKey + upperKey + remainKey;
	}

}